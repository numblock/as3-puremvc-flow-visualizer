package nl.numblock.flowcharter.controller {	import nl.numblock.DebugInterests;	import nl.numblock.flowcharter.constants.Notifications;	import nl.numblock.flowcharter.dto.PuremvcObject;	import nl.numblock.flowcharter.dto.UmlDTO;	import nl.numblock.flowcharter.graphics.CommandMC;	import nl.numblock.flowcharter.graphics.MediatorMC;	import nl.numblock.flowcharter.graphics.NotificationMC;	import nl.numblock.flowcharter.model.SocketProxy;	import nl.numblock.util.debug.Debugger;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.command.SimpleCommand;	import flash.display.DisplayObject;	import flash.display.Sprite;	/**	 * Short description for file.	 *	 * @package    nl.numblock.flowcharter.controller	 * @author     numblock / 2010	 * @version    SVN: $Id$	*/	public class CreateUMLCommand extends SimpleCommand	{		override public function execute(note: INotification) : void		{			var data		:	PuremvcObject	=	note.getBody() as PuremvcObject;			var serverProxy	:	SocketProxy		=	facade.retrieveProxy(SocketProxy.NAME) as SocketProxy;			 						var uml			:	DisplayObject;			switch(data.type)			{				case PuremvcObject.TYPE_NOTIFICATION	:					uml									=	new NotificationMC();					NotificationMC(uml).noteText.text 	= 	data.name;					serverProxy.currentNote 			= 	data.name;					sendNotification(Notifications.ADD_NOTIFICATION, uml);				break;				case PuremvcObject.TYPE_COMMAND			:					uml									=	new CommandMC();					CommandMC(uml).commandText.text 	= 	data.name;					if(data.noteName != serverProxy.currentNote)					{						sendNotification(Notifications.ADD_COMMAND_SINGLE, uml);					} else {						sendNotification(Notifications.ADD_COMMAND, uml);					}				break;				case PuremvcObject.TYPE_MEDIATOR		:					uml									=	new MediatorMC();					MediatorMC(uml).mediatorText.text 	= 	data.name;					if(data.noteName != serverProxy.currentNote)					{						sendNotification(Notifications.ADD_MEDIATOR_SINGLE, uml);					} else {						sendNotification(Notifications.ADD_MEDIATOR, uml);					}				break;			}					}	}}