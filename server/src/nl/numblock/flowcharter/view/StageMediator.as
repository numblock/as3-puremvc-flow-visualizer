package nl.numblock.flowcharter.view {	import nl.numblock.flowcharter.constants.Notifications;	import org.puremvc.as3.multicore.interfaces.INotification;	import org.puremvc.as3.multicore.patterns.mediator.Mediator;	import flash.desktop.NativeApplication;	import flash.display.Stage;	import flash.events.Event;	/**	 * Short description for file.	 *	 * @package    nl.numblock.flowcharter.view	 * @author     numblock / 2010	 * @version    SVN: $Id$	*/	public class StageMediator extends Mediator	{		public static const NAME : String = "StageMediator";			public function StageMediator(viewComponent : Object = null)		{			super(StageMediator.NAME, viewComponent);		}			override public function onRegister() : void		{			NativeApplication.nativeApplication.addEventListener(Event.EXITING, onAppExiting);			stage.addEventListener(Event.RESIZE, 								onStageResize);		}		private function onStageResize( _event : Event ) : void 		{			sendNotification(Notifications.STAGE_RESIZE);
		}
		private function onAppExiting(_event : Event) : void 		{			sendNotification(Notifications.APPLICATION_EXITING);
		}				override public function listNotificationInterests() : Array		{			return	[									];		}				override public function handleNotification(note : INotification) : void		{			switch( note.getName() )			{				default :					break;			}		}		
		public function get stage() : Stage		{			return viewComponent as Stage;		}	}}